# col_names
codebook             <- read.csv("data/citation_codebook.csv")
cite_new_names       <- codebook$r_label[match(names(nieu_cite), codebook$label)]
names(nieu_cite)     <- ifelse(!is.na(cite_new_names), cite_new_names, names(nieu_cite))
# Recode
nieu_cite$diff_time <- as.numeric(nieu_cite$pub_year) - 2011
# Since the earliest published piece Nieuwenhuis analyze is from 2009 (even accounting for some early pub., need to nuke the rest. Looks reasonable. False positives not a huge issue it seems.)
nieu_cite <- subset(nieu_cite, pub_year > 2008)
# Merge with Nieuwenhuis dat
# ---------------------------------
nieu           <- read.csv("data/01_nieuwenhuis/from_nieuwenhuis/nieuwenhuis_with_id.csv")
names(nieu)    <- paste0("orig_article_", tolower(names(nieu)))
nw_nieu_cite   <- merge(nieu_cite, nieu, by.x = "id", by.y = "orig_article_article_id", all.x = T, all.y = F)
# The total number of articles that are eventually retracted
ret_art  <- read.csv("data/07_retracted_articles/new_retracted_articles.csv")
nrow(ret_art)
# 3107
# Left_join notices to retracted so we have all the retracted articles
# Includes 192 that weren't cited
re_no <- left_join(notices, retracted, by = "index",  suffix = c("_no", "_re"))
# Rename cols.
new_names_re <- codebook$r_label[match(names(re_no), paste0(codebook$label, "_re"))]
new_names_no <- codebook$r_label[match(names(re_no), paste0(codebook$label, "_no"))]
names(re_no) <- ifelse(!is.na(new_names_re), paste0(new_names_re, "_re"), names(re_no))
names(re_no) <- ifelse(!is.na(new_names_no), paste0(new_names_no, "_no"), names(re_no))
# Let's subset on the columns we will be using
re_no <- re_no[, c("index", "pub_year_re", "pub_year_no")]
summary(re_no$pub_year_re)
# Get index and pub_date of all the retracted articles
ret_art <- subset(ret_art, select = c("index", "PY"))
names(ret_art) <- c("index", "ret_art_pub_year")
# Add the year the retracted article was published to the data frame
# this allows us to add 0s for all years where there were no citations
# that are after the publication year and before 2016
re_no <- re_no %>%
left_join(ret_art)
# Sanity checks
sum(re_no$ret_art_pub_year > re_no$pub_year_re, na.rm = T)
sum(re_no$ret_art_pub_year > re_no$pub_year_no)
re_no <- subset(re_no, is.na(pub_year_re) | (!is.na(pub_year_re) & (ret_art_pub_year <= pub_year_re)))
# Total cites by year
cites_by_article_year <- re_no %>%
group_by(index, pub_year_re) %>%
summarise(n_cites = n(),
pub_year_no = unique(pub_year_no),
ret_art_pub_year = unique(ret_art_pub_year))
# Get complete set of years for each index after the retracted article is published
all_years <- data.frame(index = NA, pub_year_re = NA, notice_year = NA)
j <- 0
for (i in unique(re_no$index)) {
pub_year    <- unique(re_no[re_no$index == i, "ret_art_pub_year"])
n_entries   <- 2016 - pub_year
all_years[(j + 1):(j + n_entries + 1), ] <- cbind(i, pub_year:(pub_year + n_entries), unique(re_no[re_no$index == i, "pub_year_no"]))
j <- j + n_entries + 1
}
all_years$key <- paste0(all_years$index, ";", all_years$pub_year_re)
cites_by_article_year$key <- paste0(cites_by_article_year$index, ";", cites_by_article_year$pub_year_re)
# Left join incomplete cites to all years
cites_by_article_all_years <- all_years %>%
left_join(cites_by_article_year,
by = c("index" = "index",
"pub_year_re" = "pub_year_re"))
# Time from publication of retraction notice
cites_by_article_all_years$diff <- as.numeric(cites_by_article_all_years$pub_year_re) - as.numeric(cites_by_article_all_years$notice_year)
# Pad 0s
cites_by_article_all_years$n_cites <- ifelse(is.na(cites_by_article_all_years$n_cites), 0, cites_by_article_all_years$n_cites)
# Subset to all the years for which we have complete data
cites_by_article_all_years_2016 <- subset(cites_by_article_all_years, pub_year_re < 2016 & ret_art_pub_year < 2016 & notice_year < 2016)
# 2. Out of the box numbers: Total cites before/after notification
# ------------------------------------------
sum(cites_by_article_all_years_2016[cites_by_article_all_years_2016$diff < 0, "n_cites"])
# [1] 36693
sum(cites_by_article_all_years_2016[cites_by_article_all_years_2016$diff > 0, "n_cites"])
# [1] 22771
sum(cites_by_article_all_years[cites_by_article_all_years$diff < 0, "n_cites"])
# [1] 40884
sum(cites_by_article_all_years[cites_by_article_all_years$diff > 0, "n_cites"])
# [1] 25143
25143/2589
View(pf2)
View(pf2)
getwd()
diffs<-read.csv(file = "387diffs.csv")
hist(diffs)
diffs
plot(diffs)
hist(diffs)
help(hist)
diffs<-read.csv(file = "387diffs.csv")
hist(diffs$diff)
scores<-c(44
40
49
47
49
41
0
43
43
34
52
39
22
48
46
47
40
43
47
37
46
47
54
41
47
41
39
33
0
45
49
50
45
47
41
42
35
40
52
43
40
52
37
49
34
39
50
48
49
30
44
46
48
38
46
51
40
44
0
36
48
49
45
46
45
43
36
42
41
39
37
47
48
36
36
41
43
37
43
40
41
44
50
0
45
46
44
37
41
45
43
51
48
39
49
45
44
36
36
31
43
50
36
42
38
40
0
46
44
51
46
54
46
49
40
40
46
44
41
47
46
43
43
53
54
35
39
44
42
47
50
37
33)
scores
scores<-c(44,40,49,47,49,4143,43,34,52,39,22,48,46,47,40,43,47,37,46,47,54,41,47,41,39,3345,49,50,45,47,41,42,35,40,52,43,40,52,37,49,34,39,50,48,49,30,44,46,48,38,46,51,40,4436,48,49,45,46,45,43,36,42,41,39,37,47,48,36,36,41,43,37,43,40,41,44,5045,46,44,37,41,45,43,51,48,39,49,45,44,36,36,31,43,50,36,42,38,4046,44,51,46,54,46,49,40,40,46,44,41,47,46,43,43,53,54,35,39,44,42,47,50,37,33)
hist(scores)
scores<-c(44,40,49,47,49,41,43,43,34,52,39,22,48,46,47,40,43,47,37,46,47,54,41,47,41,39,3345,49,50,45,47,41,42,35,40,52,43,40,52,37,49,34,39,50,48,49,30,44,46,48,38,46,51,40,44,36,48,49,45,46,45,43,36,42,41,39,37,47,48,36,36,41,43,37,43,40,41,44,5045,46,44,37,41,45,43,51,48,39,49,45,44,36,36,31,43,50,36,42,38,40,46,44,51,46,54,46,49,40,40,46,44,41,47,46,43,43,53,54,35,39,44,42,47,50,37,33)
hist(scores)
scores<-c(44,40,49,47,49,41,43,43,34,52,39,22,48,46,47,40,43,47,37,46,47,54,41,47,41,39,3345,49,50,45,47,41,42,35,40,52,43,40,52,37,49,34,39,50,48,49,30,44,46,48,38,46,51,40,44,36,48,49,45,46,45,43,36,42,41,39,37,47,48,36,36,41,43,37,43,40,41,44,50,45,46,44,37,41,45,43,51,48,39,49,45,44,36,36,31,43,50,36,42,38,40,46,44,51,46,54,46,49,40,40,46,44,41,47,46,43,43,53,54,35,39,44,42,47,50,37,33)
hist(scores)
scores<-c(44,40,49,47,49,41,43,43,34,52,39,22,48,46,47,40,43,47,37,46,47,54,41,47,41,39,33,45,49,50,45,47,41,42,35,40,52,43,40,52,37,49,34,39,50,48,49,30,44,46,48,38,46,51,40,44,36,48,49,45,46,45,43,36,42,41,39,37,47,48,36,36,41,43,37,43,40,41,44,50,45,46,44,37,41,45,43,51,48,39,49,45,44,36,36,31,43,50,36,42,38,40,46,44,51,46,54,46,49,40,40,46,44,41,47,46,43,43,53,54,35,39,44,42,47,50,37,33)
hist(scores)
getwd()
497final<-read.csv("497final.csv")
final<-read.csv("497final.csv")
View(final)
library(ltm)
final<-read.csv("497final.csv")
descript(final)
descript(final[,3:79])
descript(final[,4:79])
descript(final[,4:78])
descript(final[,3:79])
descript(final[4:79,])
descript(final[,4:])
descript(final[,4:79])
test<-LSAT
View(test)
descript(final[,4:80])
descript(final[,4:77])
summary(final[,4:79])
View(final)
data<-final[,4:79]
descript(data = data)
dim(data)
View(data)
View(data)
final<-read.csv("497final.csv")
descript(final[,4:79])
fit2<-rasch(final[,4:79])
write.csv(factor.scores(fit2), "IRTests_497.csv")
factor.scores(fit2)
irt_497final<-factor.scores(fit1)
irt_497final<-factor.scores(fit2)
names(irt_497final)
write.csv(factor.scores(fit2)$score.dat, "IRTests_497.csv")
factor.scores(fit2, response.patterns = final[,4:79])
summary(fit2)
fit2<-tpm(final[,2:79])
fit2<-tpm(final[,4:79])
summary(fit2)
descript(final[,4:79])
rasch(final[,4:14])
summary(rasch(final,4:14))
summary(rasch(final[4:14])
)
summary(final[,4:79])
getwd()
install.packages("itemanalysis")
library(itemanalysis)
library(tidyverse)
library(lme4)
library(lmer4)
RShowDoc("lmerperf", package = "lme4")
getwd()
library(psych)
setwd("/Users/Ken/My Drive/Pharmacy/Program Evaluatio/Data and Analysis/Student Grades/")
setwd("/Users/Ken/My Drive/Pharmacy/Program Evaluation/Data and Analysis/Student Grades/")
setwd("/Google Drive/My Drive/Pharmacy/Program Evaluation/Data and Analysis/Student Grades/")
setwd("//My Drive/Pharmacy/Program Evaluation/Data and Analysis/Student Grades/")
setwd("/My Drive/Pharmacy/Program Evaluation/Data and Analysis/Student Grades/")
setwd("/Users/Ken/Google Drive File Stream/My Drive/Pharmacy/Program Evaluatio/Data and Analysis/Student Grades/")
summary(m5)
library(lpSolve)
library(lpsolve)
install.packages("lpSolve")
install.packages("lpSolve")
library(lpsolve)
library(lpSolve)
setwd("/Users/Ken/Documents/Github/optimal_sequence/data")
setwd("/Users/Ken/Documents/Github/optimal_sequence/data")
cost<-as.matrix(read.csv(cost.csv))
getwd()
cost<-as.matrix(read.csv(file = "cost.csv"))
cost
cost<-as.matrix(read.csv(file = "cost.csv", row.names = TRUE))
cost<-cost[2:5,1:5]
cost
cost<-as.matrix(read.csv(file = "cost.csv", row.names = TRUE))
cost<-cost[1:5,2:6]
cost<-as.matrix(read.csv(file = "cost.csv", row.names = TRUE))
cost<-cost[1:5,2:5]
cost
cost<-as.matrix(read.csv(file = "cost.csv", row.names = TRUE))
cost<-as.matrix(read.csv(file = "cost.csv"))
cost<-cost[1:5,2:6]
cost
obj.fun<-as.vector(transpose(cost))
obj.fun<-as.vector(t(cost))
obj.fun
rhs <- c(rep(1,m), rep(.5,n))
m <- 5
n <- 5
rhs <- c(rep(1,m), rep(.5,n))
rhs
obj.fun<-as.vector(t(cost))
m <- 5
n <- 5
constr <- matrix (0, m+n, m*n)
for (1 in 1:m){
for(j in 1:n){
constr[i, n*(i-1)+j ] <- 1
constr[m+j, n*(i-1)+j] <- 1
}
}
constr.dir <- c(rep("=",m), rep("<=",n))
rhs <- c(rep(1,m), rep(.5,n))
prod.seq <- lp ("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
for (i in 1:m){
for(j in 1:n){
constr[i, n*(i-1)+j ] <- 1
constr[m+j, n*(i-1)+j] <- 1
}
}
constr.dir <- c(rep("=",m), rep("<=",n))
rhs <- c(rep(1,m), rep(.5,n))
prod.seq <- lp ("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
prod.seq$solution
prod.seq$objval
prod.seq$objective
constr.dir <- c(rep("==",m), rep("<=",n))
rhs <- c(rep(1,m), rep(.5,n))
prod.seq <- lp ("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
prod.seq$objval
prod.seq$solution
constr.dir <- c(rep(">=",m), rep("<=",n))
rhs <- c(rep(1,m), rep(.5,n))
prod.seq <- lp ("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
prod.seq$solution
rhs
constr.dir <- c(rep(">",m), rep("<=",n))
rhs <- c(rep(0,m), rep(.5,n))
prod.seq <- lp ("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
prod.seq$solution
constr
constr <- matrix (0, m+n+m, m*n)
for (i in 1:m){
for(j in 1:n){
constr[i, n*(i-1)+j ] <- 1
constr[i, n*(i-1)+j ] <- 1
constr[m+j, n*(i-1)+j] <- 1
}
}
constr.dir <- c(rep(">",m), rep("<",m), rep("<=",n))
rhs <- c(rep(0,m), rep(2,m),rep(.5,n))
constr
for (i in 1:m){
for(j in 1:n){
constr[i, n*(i-1)+j ] <- 1
constr[i+m, n*(i-1)+j ] <- 1
constr[m+j, n*(i-1)+j] <- 1
}
}
constr
for (i in 1:m){
for(j in 1:n){
constr[i, n*(i-1)+j ] <- 1
constr[i+m, n*(i-1)+j ] <- 1
constr[n+m+j, n*(i-1)+j] <- 1
}
}
constr
constr <- matrix (0, m+n+m, m*n)
constr
for (i in 1:m){
for(j in 1:n){
constr[i, n*(i-1)+j ] <- 1
constr[i+m, n*(i-1)+j ] <- 1
constr[n+m+j, n*(i-1)+j] <- 1
}
}
constr
constr.dir <- c(rep(">",m), rep("<",m), rep("<=",n))
rhs <- c(rep(0,m), rep(2,m),rep(.5,n))
constr.dir
constr.dir <- c(rep(">=",m), rep("=<",m), rep("<=",n))
rhs <- c(rep(0,m), rep(2,m),rep(.5,n))
constr.dir
rhs
prod.seq <- lp ("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
constr
constr.dir <- c(rep(">=",m), rep("<=",m), rep("<=",n))
prod.seq <- lp ("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
prod.seq$solution
cost
obj.fun
constr
constr.dir
rhs
prod.seq <- lp ("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
prod.seq$solution
constr <- matrix (0, m+n, m*n)
for (i in 1:m){
for(j in 1:n){
constr[i, n*(i-1)+j ] <- 1
constr[m+j, n*(i-1)+j] <- 1
}
}
constr.dir <- c(rep("==",m), rep("<=",n))
rhs <- c(rep(1,m), rep(.5,n))
prod.seq <- lp ("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
prod.seq$solution
h = .25
e = 15
obj.fun<-as.vector(t(cost)+c(rep(h*e),m*n)
)
h = .25
e = 15
obj.fun<-as.vector(t(cost))+c(rep(h*e),m*n)
obj.fun
c(rep(h*e),m*n)
c(rep(h*e,m*n))
obj.fun<-as.vector(t(cost)+c(rep(h*e,m*n))
obj.fun<-as.vector(t(cost))+c(rep(h*e,m*n))
obj.fun
constr <- matrix (0, m+n, m*n)
for (i in 1:m){
for(j in 1:n){
constr[i, n*(i-1)+j ] <- 1
constr[m+j, n*(i-1)+j] <- 1
}
}
constr.dir <- c(rep("==",m), rep("<=",n))
rhs <- c(rep(1,m), rep(.5,n))
prod.seq <- lp ("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
prod.seq$solution
constr <- matrix (0, m+n, m*n)
for (i in 1:m){
for(j in 1:n){
constr[i, n*(i-1)+j ] <- 1
constr[m+j, n*(i-1)+j] <- 1
}
}
constr.dir <- c(rep("==",m), rep("<=",n))
rhs <- c(rep(1,m), rep(.5,n))
prod.seq <- lp ("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
prod.seq$objval
constr.dir <- c(rep("<=",m), rep("<=",n))
rhs <- c(rep(1,m), rep(.5,n))
prod.seq <- lp ("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
prod.seq$solution
constr.dir <- c(rep("=",m), rep("<=",n))
rhs <- c(rep(2,m), rep(.5,n))
prod.seq <- lp ("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
prod.seq$solution
constr
cost
obj.fun
install.packages("ROI")
library(ROI)
install.packages("ROI.plugin.glpk")
install.packages("ompr.roi")
library(ROI.plugin.glpk)
library(ompr.roi)
result <- MIPModel() %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(cost[i, j] * x[i, j] + h * e * x[i, j], i = 1:n, j = 1:n)) %>%
add_constraint(sum_expr(x[i, j], j = 1:n) == 1, i = 1:n) %>%
add_constraint(sum_expr(h*x[i,j], i= 1:n) <= .5, j = 1:n) %>%
solve_model(with_ROI("glpk", verbose = TRUE))
result <- MIPModel() %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary")
set_objective(sum_expr(cost[i, j] * x[i, j] + h * e * x[i, j], i = 1:n, j = 1:n))
add_constraint(sum_expr(x[i, j], j = 1:n) == 1, i = 1:n)
add_constraint(sum_expr(h*x[i,j], i= 1:n) <= .5, j = 1:n)
solve_model(with_ROI("glpk", verbose = TRUE))
library(magrittr, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
result <- MIPModel() %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(cost[i, j] * x[i, j] + h * e * x[i, j], i = 1:n, j = 1:n)) %>%
add_constraint(sum_expr(x[i, j], j = 1:n) == 1, i = 1:n) %>%
add_constraint(sum_expr(h*x[i,j], i= 1:n) <= .5, j = 1:n) %>%
solve_model(with_ROI("glpk", verbose = TRUE))
install.packages("ompr")
library(ompr)
result <- MIPModel() %>%
add_variable(x[i, j], i = 1:n, j = 1:n, type = "binary") %>%
set_objective(sum_expr(cost[i, j] * x[i, j] + h * e * x[i, j], i = 1:n, j = 1:n)) %>%
add_constraint(sum_expr(x[i, j], j = 1:n) == 1, i = 1:n) %>%
add_constraint(sum_expr(h*x[i,j], i= 1:n) <= .5, j = 1:n) %>%
solve_model(with_ROI("glpk", verbose = TRUE))
install.packages("data.table")
